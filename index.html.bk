<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Transacciones - Cálculo Semanal o Quincenal</title>
  <!-- Material Icons -->
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { margin:0; font-family:Arial,sans-serif; background:#000; margin-bottom:160px;}
    .transaction-list { padding:8px; margin-bottom:60px; }
    .transaction-card {
      background:#fff; padding:8px; margin-bottom:8px; border-radius:4px;
      box-shadow:0 2px 4px rgba(0,0,0,0.1); cursor:pointer;
    }
    .floating-btn {
      position:fixed; bottom:20px; right:20px; background:#6200ee; color:#fff;
      width:56px; height:56px; border-radius:50%; display:flex; justify-content:center;
      align-items:center; font-size:36px; cursor:pointer; z-index:20;
    }
    /* Botón flotante para información general */
    .general-info-btn {
  position: fixed;
  top: 80px;
  left: 20px;
  background: #00796b;
  color: #fff;
  width: 40px;
  height: 40px;
  border-radius: 60% 40% 40% 60% / 60% 60% 40% 40%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 30px;
  cursor: pointer;
  z-index: 20;
  transform: rotate(0deg);
}
/* Botón de configuración (switch) */
#configToggleBtn {
  position: fixed;
  display: flex;
  top: 130px;
  left: 20px;
  background: rgba(0,0,0,0.8);
  color: #fff;
  border: 1px solid gray;
  padding: 5px 10px;
  border-radius: 12px 12px 12px 0;
  cursor: pointer;
  z-index: 20;
  font-size: 12px;
  font-weight: 500;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.25);
  max-width: 200px;
  line-height: 1.4;
}
    .modal {
      display:none; 
      position:fixed; 
      top:0; left:0; right:0; bottom:0;
      background: rgba(0,0,0,0.5);
      justify-content:center; 
      align-items:center; 
      z-index:30;
    }
    .modal-content {
      box-shadow:0 2px 4px rgba(9,2,0,4.1);
      background: rgba(0,0,0,0.5); 
      color:white; 
      padding:20px; 
      border-radius:10px;
      border: 1px solid grey;
      width:65%; 
      max-width:500px; 
      position:relative;
    }
    .close-modal {
      position:absolute; 
      top:10px; 
      right:15px; 
      cursor:pointer; 
      font-size:20px;
    }
    .form-group { margin-bottom:5px;
      }
    label { display:block; margin-bottom:5px; }
    input, select { width:100%; padding:8px; box-sizing:border-box; }
    button[type="submit"], .modal-content button {
      background:#6200ee; 
      color:#fff; 
      border:none; 
      padding:10px 15px;
      cursor:pointer; 
      border-radius:4px; 
      margin-right:5px;
    }
    .group-header {
    background: rgba(0,0,0,0.5);
    margin-right:0px;
      margin-bottom:20px;
      color: white;
      padding-bottom:10px;
      padding-right:10px;
      border-radius:20px;
      cursor: pointer;
      position: relative;
      padding-top:20px;
    }
    .info-btn {
      position: absolute;
      right: 10px;
      top: 10px;
      cursor: pointer;
      font-size: 24px;
      color: white;
    }
    .amount { display:block; text-align:right; }
    .payment-date-separator {
      background:#eee; 
      padding:5px 10px; 
      margin:10px 0; 
      border-left:5px solid #6200ee; 
      font-weight:bold;
      cursor: pointer;
    }
    /* Para identificar la sección de cada cuenta */
    .account-group { margin-bottom:20px; }
    /* Estilo para el total general fijo en la parte superior */
    #globalTotals {
      position: fixed;
      top: 0px;
      right: 0;
      z-index:40;
      text-align: center;
      color: white;
      background: black;
      padding: 5px;
      border-radius: 4px;
      width: 100%;
    }
    /* Botón para agregar cuenta */
    #addAccountBtn {
  margin: px;
  background: #009688;
  color: white;
  border: none;
  padding: 18px;
  border-radius: 50px;
  cursor: pointer;
  position: fixed;
  bottom: 84px;
  right: 20px;
  z-index: 20;
  display: flex;
}
/* Contenedor de la gráfica */
    #chartContainer {color: white;
      width: 350px;
      height: 350px;
      margin: 35px auto 0 auto;
      margin-top:80px;
    }
    b { color:green; }
    c { color:red; }
    totales { display:inline-block; width:120px; height:15px; }

#periodListModal {
    display: none;
    position: fixed;
    top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.8);
    align-items: center; justify-content: center;
    z-index: 1000;
  }
  #periodListModal .modal-content {
    background: #fff; color: #000;
    max-height: 80%; overflow-y: auto;
    padding: 20px; border-radius: 8px;
    width: 90%; max-width: 500px;
  }
  #periodListModal h2 { margin-top: 0; }
  #periodListModal ul { list-style: none; padding: 0; }
  #periodListModal li { margin-bottom: 8px; }
  #periodListModal button { margin-top: 10px; }
  
  #floatingDates {
    display: inline-block;
    margin: ;
    width: 100%;
    height:;
    display: flex;
    padding: 5px;
  position: fixed;
  top: 40px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.9);
  padding: 6px 12px;
  border-radius: 6px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  font-size: 12px;
  font-weight: bold;
  color: grey;
  text-align: center;
  z-index: 999;
}
  
  </style>
</head>
<body>
  <!-- Botón de configuración -->
  <button id="configToggleBtn"></button>
  
   <!-- Botón para agregar cuenta -->
  <button id="addAccountBtn" class="material-icons">add_card</button>
  
  <!-- Contenedor de la gráfica circular -->
  <div id="chartContainer">
    <canvas id="accountsChart"></canvas>
  </div>
  
  <!-- Encabezado global con fecha actual y fecha de último pago -->
  <h1 style="color:white;margin:15px; font-size:20px;">
    Cuentas
   <div id="floatingDates" style="display: flex; justify-content: space-between; flex-wrap: wrap; width: 100%;">
  <small style="padding-left:5px;">
    Fecha Actual: <span id="currentDate"></span>
  </small>
  <small style="padding-right:5px;">
    Último Pago: <span id="lastPaymentDate"></span>
  </small>
</div>
</h1>
  
  <!-- Total general fijo -->
  <div id="globalTotals">
    <strong>Deuda actual: Total Mensual: $0</strong><br>
    <small>Total por Periodo: $0</small><br>
    <small>Total General Global: $0</small>
  </div>
  
  <div class="transaction-list" id="transactionList">Transacciones</div>
  
  <!-- Botón flotante para nueva transacción -->
  <div class="floating-btn" id="addTransactionBtn">
    <span class="material-icons">add</span>
  </div>
  
  <!-- Botón flotante para información general -->
  <div class="general-info-btn" id="generalInfoBtn">
    <span class="material-icons">info</span>
  </div>
  
  <!-- Modal para transacción -->
  <div class="modal" id="transactionModal">
    <div class="modal-content">
      <span class="close-modal" id="closeTransactionModal">&times;</span>
      <h2 id="transactionModalTitle">Nueva Transacción</h2>
      <form id="transactionForm">
        <div class="form-group">
          <label for="transCreationDate">Fecha de Creación</label>
          <input type="date" id="transCreationDate" required>
        </div>
        <div class="form-group" id="tipoField">
          <label for="transType">Tipo</label>
          <select id="transType" required>
            <option value="Gasto">Gasto</option>
            <option value="Ingreso">Ingreso</option>
          </select>
        </div>
        <div class="form-group">
          <label for="transAccount">Selecciona una Cuenta</label>
          <select id="transAccount" required></select>
        </div>
        <div class="form-group" id="gastoFields">
          <label for="transCost">Costo</label>
          <input type="number" id="transCost" step="0.01">
        </div> 
        <div class="form-group">
          <label for="transDescription">Descripción</label>
          <input type="text" value="Gasto" id="transDescription" required>
        </div>
        <div class="form-group" id="cantidadField">
          <label for="transQuantity">Cantidad</label>
          <input type="number" id="transQuantity" value="1">
        </div>
        <div class="form-group" id="mesesField">
          <label for="transMonths">Meses a Pagar</label>
          <input type="number" id="transMonths" value="1" min="1">
        </div>
        <button type="submit" id="saveTransactionBtn">Guardar</button>
      </form>
    </div>
  </div>
  
  <!-- Modal para detalles de transacción -->
  <div class="modal" id="transactionDetailsModal">
    <div class="modal-content">
      <span class="close-modal" id="closeTransactionDetailsModal">&times;</span>
      <h2>Detalles de la Transacción</h2>
      <div id="transactionDetailsContent"></div>
      <div id="transactionActionButtons" style="margin-top:10px;"></div>
    </div>
  </div>
  
  <!-- Modal para información de cuenta -->
  <div class="modal" id="accountInfoModal">
    <div class="modal-content">
      <span class="close-modal" id="closeAccountInfoModal">&times;</span>
      <div id="accountInfoContent"></div>
    </div>
  </div>
  
  <!-- Modal para información general -->
  <div class="modal" id="generalInfoModal">
    <div class="modal-content">
      <span class="close-modal" id="closeGeneralInfoModal">&times;</span>
      <h2>Información General</h2>
      <div id="generalInfoContent"></div>
    </div>
  </div>
  
  <!-- Modal para creación de cuenta -->
  <div class="modal" id="accountModal">
    <div class="modal-content">
      <span class="close-modal" id="closeAccountModal">&times;</span>
      <h2>Nueva Cuenta</h2>
      <form id="accountForm">
         <div class="form-group">
           <label for="accountName">Nombre de la Cuenta</label>
           <input type="text" id="accountName" required>
         </div>
         <div class="form-group">
           <label for="accountColor">Color</label>
           <input type="color" id="accountColor" value="#6200ee">
         </div>
         <div class="form-group">
           <label for="accountCutoffDate">Fecha de Corte</label>
           <input type="date" id="accountCutoffDate" required>
         </div>
         <div class="form-group">
           <label for="accountPaymentDate">Fecha de Pago</label>
           <input type="date" id="accountPaymentDate" required>
         </div>
         <button type="submit">Guardar Cuenta</button>
      </form>
    </div>
  </div>
  
<script>
  let useFortnights = localStorage.getItem('calcMode') === 'biweekly';

function updateConfigButtonText() {
  const btn = document.getElementById('configToggleBtn');
  btn.innerHTML = `<span class="material-icons" style="vertical-align: middle; margin-right: 0px;">pivot_table_chart</span> ${useFortnights ? "" : ""}`;
}

updateConfigButtonText();

  document.getElementById('configToggleBtn').addEventListener('click', () => {
    useFortnights = !useFortnights;
    localStorage.setItem('calcMode', useFortnights ? 'biweekly' : 'weekly');
    updateConfigButtonText();
    renderTransactions();
  });

  let transactions = [];
  let accounts = [];
  // Variable de filtro para múltiples cuentas
  let selectedAccountFilters = [];
  let selectedTransactionIndex = null;
  let isEditingTransaction = false;

  function parseLocalDate(dateStr) {
    const [yyyy, mm, dd] = dateStr.split("-");
    return new Date(+yyyy, +mm - 1, +dd);
  }

  function formatDateForInput(date) {
    const y = date.getFullYear();
    const m = String(date.getMonth() + 1).padStart(2, "0");
    const d = String(date.getDate()).padStart(2, "0");
    return `${y}-${m}-${d}`;
  }

  function formatFullDate(date) {
    let diaSemana = date.toLocaleDateString("es-MX", { weekday: "long" });
    diaSemana = diaSemana.charAt(0).toUpperCase() + diaSemana.slice(1);
    const dia = date.toLocaleDateString("es-MX", { day: "2-digit" });
    const mes = date.toLocaleDateString("es-MX", { month: "long" }).toLowerCase();
    const anio = date.getFullYear();
    return `${diaSemana}, ${dia} de ${mes} de ${anio}`;
  }

  function getCurrentFriday() {
    const today = new Date();
    const diff = (5 - today.getDay() + 7) % 7;
    const friday = new Date(today);
    friday.setDate(today.getDate() + diff);
    return friday;
  }

  function getCurrentFortnightLimit(date) {
    let d = date.getDate();
    let month = date.getMonth();
    let year = date.getFullYear();
    if (d < 16) {
      return new Date(year, month, 15);
    } else {
      return new Date(year, month + 1, 0); // último día del mes
    }
  }

function computePreviousMonthBalance(accountIndex) {
  const today = new Date();
  const prevMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0);
  const prevMonthStart = new Date(today.getFullYear(), today.getMonth() - 1, 1);

  let balance = 0;
  const account = accounts[accountIndex];

  transactions.forEach(tr => {
    if (tr.accountIndex !== accountIndex) return;
    const eff = computeEffectivePaymentDate(tr, account);
    if (eff >= prevMonthStart && eff <= prevMonthEnd) {
      const amount = tr.type === 'Gasto'
        ? (tr.installmentOffset !== undefined
            ? tr.total
            : (tr.months > 1 ? tr.total / tr.months : tr.total))
        : tr.total;
      balance += tr.type === 'Gasto' ? amount : -amount;
    }
  });

  return balance;
}   

  function countFortnights(start, end) {
    let count = 0;
    let current = new Date(start);
    while (current < end) {
      current = nextFortnightBoundary(current);
      count++;
    }
    return count;
  }

  function nextFortnightBoundary(date) {
    let current = new Date(date);
    if (current.getDate() < 16) {
      return new Date(current.getFullYear(), current.getMonth(), 16);
    } else {
      return new Date(current.getFullYear(), current.getMonth() + 1, 1);
    }
  }

  function countFridays(start, end) {
    let count = 0;
    let current = new Date(start);
    while (current < end) {
      if (current.getDay() === 5) count++;
      current.setDate(current.getDate() + 1);
    }
    return count;
  }

  function getEffectivePaymentDate(creationStr, cutoffStr, paymentStr) {
    const creation = parseLocalDate(creationStr);
    const cutoffRef = parseLocalDate(cutoffStr);
    const paymentRef = parseLocalDate(paymentStr);
    const cutoffDay = cutoffRef.getDate();
    const paymentDay = paymentRef.getDate();
    let year = creation.getFullYear();
    let month = creation.getMonth();
    let cycleCutoff = new Date(year, month, cutoffDay);
    if (paymentDay < cutoffDay) {
      if (creation <= cycleCutoff) {
        month += 1;
      } else {
        month += 2;
      }
    } else {
      if (creation <= cycleCutoff) {
      } else {
        month += 1;
      }
    }
    while (month > 11) {
      month -= 12;
      year++;
    }
    return new Date(year, month, paymentDay);
  }

  function computeEffectivePaymentDate(transaction, account) {
    let base = getEffectivePaymentDate(
      transaction.creationDate,
      account.cutoffDate,
      account.paymentDate
    );
    if (transaction.installmentOffset !== undefined) {
      let newDate = new Date(base);
      newDate.setMonth(newDate.getMonth() + transaction.installmentOffset);
      return newDate;
    }
    return base;
  }

  function loadAccounts() {
    const stored = localStorage.getItem('cuentas');
    accounts = stored ? JSON.parse(stored) : [];
    populateAccountSelect();
    updateAccountsChart();
  }

  function saveAccounts() {
    localStorage.setItem('cuentas', JSON.stringify(accounts));
  }

  function populateAccountSelect() {
    const sel = document.getElementById('transAccount');
    sel.innerHTML = '';
    if (accounts.length === 0) {
      sel.disabled = true;
      let op = document.createElement('option');
      op.value = "";
      op.text = "No hay cuentas disponibles";
      sel.appendChild(op);
    } else {
      sel.disabled = false;
      accounts.forEach((acc, idx) => {
        let op = document.createElement('option');
        op.value = idx;
        op.text = acc.name;
        sel.appendChild(op);
      });
    }
  }

  function loadTransactions() {
    const stored = localStorage.getItem('transacciones');
    transactions = stored ? JSON.parse(stored) : [];
    renderTransactions();
    updateAccountsChart();
    updateLastPaymentHeader();
  }

  function saveTransactions() {
    localStorage.setItem('transacciones', JSON.stringify(transactions));
  }
  
  function updateLastPaymentHeader() {
    let lastPayment = null;
    transactions.forEach(tr => {
      const acc = accounts[tr.accountIndex];
      if (acc) {
        const eff = computeEffectivePaymentDate(tr, acc);
        if (!lastPayment || eff > lastPayment) {
          lastPayment = eff;
        }
      }
    });
    document.getElementById('lastPaymentDate').innerText = lastPayment ? formatFullDate(lastPayment) : '-';
  }

  function renderTransactions() {
    let filteredTransactions = selectedAccountFilters.length > 0
      ? transactions.filter(tr => selectedAccountFilters.includes(tr.accountIndex))
      : transactions;

    filteredTransactions.sort((a, b) => {
      let accA = accounts[a.accountIndex];
      let accB = accounts[b.accountIndex];
      if (!accA || !accB) return 0;
      let da = computeEffectivePaymentDate(a, accA);
      let db = computeEffectivePaymentDate(b, accB);
      return da - db;
    });
    saveTransactions();

    const container = document.getElementById('transactionList');
    container.innerHTML = '';

    let globalDailyTotal = 0, globalDailyPeriodTotal = 0, globalGeneralTotal = 0;
    let groups = {};
    filteredTransactions.forEach((tr, idx) => {
      if (!groups[tr.accountIndex]) {
        groups[tr.accountIndex] = { transactions: [], indices: [] };
      }
      groups[tr.accountIndex].transactions.push(tr);
      groups[tr.accountIndex].indices.push(idx);
    });

    const today = new Date();
    for (let accountIndex in groups) {
      let group = groups[accountIndex];
      let account = accounts[accountIndex];
      if (!account) continue;

      const todayStr = formatDateForInput(today);
const currentPaymentDate = getEffectivePaymentDate(todayStr, account.cutoffDate, account.paymentDate);

const prevBalance = computePreviousMonthBalance(parseInt(accountIndex), currentPaymentDate);

const currBalance = computeCurrentMonthBalance(parseInt(accountIndex), currentPaymentDate);

const showPrev = prevBalance > 0;
const balanceLabel = showPrev ? 'Saldo mes anterior' : 'Saldo mes actual';
const displayBalance = showPrev ? prevBalance : currBalance;
const displayStr = `$${Number(displayBalance)
  .toLocaleString("es-MX",{minimumFractionDigits:0,maximumFractionDigits:2})}`;
const statusText = displayBalance <= 0 ? 'Pagado' : 'Pendiente';
const payDay = parseLocalDate(account.paymentDate).getDate();
const prevPaymentDate = new Date(
  currentPaymentDate.getFullYear(), 
  currentPaymentDate.getMonth() - 1, 
  payDay
);

const diffPrevTime = prevPaymentDate - today;
const diffPrevDays = Math.ceil(diffPrevTime / (1000 * 60 * 60 * 24));

const prevPaymentDateStr = prevPaymentDate
  ? formatFullDate(prevPaymentDate)
  : '-';

      const periodCount = useFortnights ? countFortnights(today, currentPaymentDate) : countFridays(today, currentPaymentDate);

      const limitOfPayment = useFortnights ? getCurrentFortnightLimit(today) : getCurrentFriday();

      let groupTransactions = group.transactions.filter(tr => {
        let tEff = computeEffectivePaymentDate(tr, account);
        return tEff.toDateString() === currentPaymentDate.toDateString();
      });
      if (groupTransactions.length === 0) continue;

      let dailyTotal = 0, dailyPeriodTotal = 0;
      groupTransactions.forEach(x => {
        let amount = x.type === 'Gasto'
          ? (x.installmentOffset !== undefined ? x.total : (x.months > 1 ? x.total / x.months : x.total))
          : x.total;
        let countPeriods = useFortnights 
          ? countFortnights(today, computeEffectivePaymentDate(x, account))
          : countFridays(today, computeEffectivePaymentDate(x, account));
        let portion = countPeriods > 0 ? amount / countPeriods : amount;
        if (x.type === 'Gasto') {
          dailyTotal += amount;
          dailyPeriodTotal += portion;
        } else {
          dailyTotal -= amount;
          dailyPeriodTotal -= portion;
        }
      });

      globalDailyTotal += dailyTotal;
      globalDailyPeriodTotal += dailyPeriodTotal;

      let generalTotal = 0;
      group.transactions.forEach(x => {
        let amount = x.type === 'Gasto'
          ? (x.installmentOffset !== undefined ? x.total : (x.months > 1 ? x.total / x.months : x.total))
          : x.total;
        generalTotal += x.type === 'Gasto' ? amount : -amount;
      });
      globalGeneralTotal += generalTotal;

      let lastPaymentForAccount = null;
      group.transactions.forEach(x => {
        const eff = computeEffectivePaymentDate(x, account);
        if (!lastPaymentForAccount || eff > lastPaymentForAccount) {
          lastPaymentForAccount = eff;
        }
      });
      let lastPaymentForAccountStr = lastPaymentForAccount ? formatFullDate(lastPaymentForAccount) : '-';

      let header = document.createElement('div');
      header.className = 'group-header';
      header.style.background = account.color 
        ? `linear-gradient(to left, ${account.color}, black)` 
        : 'linear-gradient(to left, #7B5DFF, black)';

const prevBalanceStr = `$${Number(prevBalance)
  .toLocaleString("es-MX",{minimumFractionDigits:0, maximumFractionDigits:2})}`;
      const currentPaymentStr = formatFullDate(currentPaymentDate);
      const diffTime = currentPaymentDate - today;
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));


function computeCurrentMonthBalance(accountIndex, refDate) {
  const year  = refDate.getFullYear();
  const month = refDate.getMonth();
  const start = new Date(year, month-1);
  const end   = new Date(year, month);
  let balance = 0;
  const account = accounts[accountIndex];

  transactions.forEach(tr => {
    if (tr.accountIndex !== accountIndex) return;
    const eff = computeEffectivePaymentDate(tr, account);
    if (eff >= start && eff <= end) {
      const amt = tr.type === 'Gasto'
        ? (tr.installmentOffset !== undefined
            ? tr.total
            : (tr.months > 1 ? tr.total/tr.months : tr.total))
        : tr.total;
      balance += tr.type === 'Gasto' ? amt : -amt;
    }
  });

  return balance;
}
header.innerHTML = `
  <strong style="font-size: 20px;"><i class="material-icons">credit_card</i> <span style="top:-40px;">${account.name}</span></strong><br>
  <small style="font-size:12px; color:white;">
    <strong>Pago:</strong> ${currentPaymentStr} en ${diffDays} día(s) (${useFortnights ? `${periodCount} quincenas` : `${periodCount} viernes`})
  </small><br>

  <span class="" style="">
    
    <small style="font-weight:bold;font-size:12px;padding-top:2px;">Deuda Actual:</small>
    <span style="color:red;font-size:18px;">
      $${Number(showPrev ? prevBalance : dailyTotal)
        .toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}
    </span>
  </span><br><br>
  <span class="amount1" style="margin-top:-60px;">
    <small style="font-weight:bold; color:grey;">Pago: ${formatFullDate(limitOfPayment)}</small><br>
    <span style="font-size:25px; color:green; font-weight:bold;">
      $${Number(dailyPeriodTotal).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}
    </span> ${useFortnights ? "quincenal" : "semanal"}<br>

    <span style="font-size:12px; font-weight:bold; padding-right:30px;padding-top:6px;" class="info-btn">${balanceLabel}: ${displayStr} <span style="border-radius:5px; background: white; padding:0.5px; font-size:12px; color:${statusText === 'Pagado' ? 'green' : 'red'}; font-weight:bold;">
  ${statusText}
</span>
    <br>
    ${prevPaymentDateStr} <small style="font-size:12px; color:white;">
  <strong>en:</strong> ${diffPrevDays} día(s)
</small><br>
    </span><span class="material-icons info-btn" title="Ver información">info</span><br>
    <small style="font-size:12px; color:white; right:20px; padding-right:20px;">
      <strong>Último pago:</strong> ${lastPaymentForAccountStr}
    </small>
  </span>

  <span class="amount" style="margin-top:-15px; margin-right:-10px; font-size:20px;">
    <small style="font-weight:bold; font-size:12px;">Saldo:</small>
    <span style="font-size:20px; background:black; padding:10px 25px 10px 15px; border-radius:0;">
      $${Number(generalTotal)
        .toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}
    </span>
  </span>
`;

      header.addEventListener('click', (e) => {
        if (e.target.classList.contains('info-btn')) return;
        document.querySelectorAll('.account-group').forEach(div => div.style.display = 'none');
        groupDiv.style.display = groupDiv.style.display === 'none' ? 'block' : 'none';
      });
      container.appendChild(header);

      header.querySelector('.info-btn').addEventListener('click', (e) => {
        e.stopPropagation();
        showAccountInfo(parseInt(accountIndex), group.transactions, generalTotal);
      });

      let groupDiv = document.createElement('div');
      groupDiv.className = 'account-group';
      groupDiv.style.display = 'none';
      group.transactions.forEach((tr, i) => {
        let globalIdx = group.indices[i];
        let card = document.createElement('div');
        card.className = 'transaction-card';
        card.style.borderLeft = `5px solid ${tr.type === 'Gasto' ? '#f44336' : '#4caf50'}`;
        if (tr.type === 'Ingreso') {
          card.innerHTML = `
            <div style="background: linear-gradient(to right, #4c4c4c, black); color: white; padding: 10px; margin: -10px;">
              <small class="amount" style="margin-bottom: -15px;">${account.name}</small>
              <strong><i style"font-size:10px;" class="material-icons">attach_money</i> ${tr.description}</strong><br>
              <small style="font-weight: bold; font-size: 12px;color: gray;">
                ${formatFullDate(parseLocalDate(tr.creationDate))}
              </small><br>
              <span class="amount" style="color: #4caf50; margin-top: -15px;">
                +$${Number(tr.total).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}
              </span>
            </div>
          `;
        } else {
          card.innerHTML = `
            <div style="background: linear-gradient(to right, #4C4C4C, black); color: white; padding: 10px; margin: -10px;">
              <small class="amount" style="margin-bottom: -15px;">${account.name}</small>
              <strong><i class="material-icons">payments</i> ${tr.description}</strong>
              <small style="border-radius:27px;color:#f44336;font-weight:bold;">
                ${tr.installmentOffset !== undefined ? `(${tr.installmentOffset + 1} / ${tr.totalMonths})` : ''}
              </small>
              <br>
              <small style="font-weight: bold; font-size: 12px;color:gray;">
                ${formatFullDate(parseLocalDate(tr.creationDate))}
              </small><br>
              <span class="amount" style="color: #f44336; margin-top: -15px;">
                -$${Number(tr.total).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}
              </span>
            </div>
          `;
        }
        card.addEventListener('click', () => {
          selectedTransactionIndex = globalIdx;
          showTransactionDetails(tr);
        });
        groupDiv.appendChild(card);
      });
      container.appendChild(groupDiv);
    }
    const globalDiv = document.getElementById('globalTotals');
    globalDiv.innerHTML = `
      <totales id=""><strong>Total Mensual</strong><br> <span style="color:red;font-size:16px;">$${Number(globalDailyTotal).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</span></totales>
<totales id="totalPeriodBtn">
      <strong>Total ${useFortnights ? "Quincenal" : "Semanal"}</strong><br> <span style="color:green;font-size:16px;">$${Number(globalDailyPeriodTotal).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })} <i class="material-icons" style="text-decoration:none; font-size:14px;">info</i></span></totales>
      <totales><strong>Deuda Total</strong><br> <span style="font-size:16px;">$${Number(globalGeneralTotal).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</span></totales>
    `;
  }

  function showAccountInfo(accountIndex, accountTransactions, accountTotal) {
    const account = accounts[accountIndex];
    const today = new Date();
    let monthlyTotals = {};
    let lastPaymentDate = null;
    accountTransactions.forEach(tr => {
      const eff = computeEffectivePaymentDate(tr, account);
      if (eff >= today) {
        let key = eff.getFullYear() + '-' + String(eff.getMonth() + 1).padStart(2, '0');
        if (!monthlyTotals[key]) monthlyTotals[key] = 0;
        let amount = tr.type === 'Gasto'
          ? (tr.installmentOffset !== undefined ? tr.total : (tr.months > 1 ? tr.total / tr.months : tr.total))
          : tr.total;
        monthlyTotals[key] += tr.type === 'Gasto' ? amount : -amount;
      }
      if (!lastPaymentDate || eff > lastPaymentDate) {
        lastPaymentDate = eff;
      }
    });
    let monthlyHtml = '';
    if (Object.keys(monthlyTotals).length > 0) {
      monthlyHtml += '<ul>';
      Object.keys(monthlyTotals).sort().forEach(key => {
        monthlyHtml += `<li><strong>${key}:</strong> $${Number(monthlyTotals[key]).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</li>`;
      });
      monthlyHtml += '</ul>';
    } else {
      monthlyHtml = 'No hay transacciones programadas para meses futuros.';
    }
    let html = `
      <p><h1>${account.name}</p></h1>
      <p><strong>Saldo:</strong> $${Number(accountTotal).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</p>
      <p><strong>Próximos meses:</strong><br>${monthlyHtml}</p>
      <p><strong>Fecha de Último Pago:</strong> ${lastPaymentDate ? formatFullDate(lastPaymentDate) : '-'}</p>
    `;
    document.getElementById('accountInfoContent').innerHTML = html;
    document.getElementById('accountInfoModal').style.display = 'flex';
  }

  function showGeneralInfo() {
    const today = new Date();
    let monthlyTotals = {};
    let globalTotal = 0;
    let lastPayment = null;
    transactions.forEach(tr => {
      const acc = accounts[tr.accountIndex];
      if (acc) {
        const eff = computeEffectivePaymentDate(tr, acc);
        if (eff >= today) {
          let key = eff.getFullYear() + '-' + String(eff.getMonth() + 1).padStart(2, '0');
          if (!monthlyTotals[key]) monthlyTotals[key] = 0;
          let amount = tr.type === 'Gasto'
            ? (tr.installmentOffset !== undefined ? tr.total : (tr.months > 1 ? tr.total / tr.months : tr.total))
            : tr.total;
          monthlyTotals[key] += tr.type === 'Gasto' ? amount : -amount;
        }
        if (!lastPayment || eff > lastPayment) {
          lastPayment = eff;
        }
        globalTotal += tr.type === 'Gasto'
          ? (tr.installmentOffset !== undefined ? tr.total : (tr.months > 1 ? tr.total / tr.months : tr.total))
          : -tr.total;
      }
    });
    let monthlyHtml = '';
    if (Object.keys(monthlyTotals).length > 0) {
      monthlyHtml += '<ul>';
      Object.keys(monthlyTotals).sort().forEach(key => {
        monthlyHtml += `<li><strong>${key}:</strong> $${Number(monthlyTotals[key]).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</li>`;
      });
      monthlyHtml += '</ul>';
    } else {
      monthlyHtml = 'No hay transacciones programadas para meses futuros.';
    }
    let html = `
       <p><strong>Deuda Total Global:</strong> $${Number(globalTotal).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</p>
       <p><strong>Totales Mensuales Globales (próximos meses):</strong><br>${monthlyHtml}</p>
       <p><strong>Último Pago Global:</strong> ${lastPayment ? formatFullDate(lastPayment) : '-'}</p>
    `;
    document.getElementById('generalInfoContent').innerHTML = html;
    document.getElementById('generalInfoModal').style.display = 'flex';
  }

  let accountsChart;
  function updateAccountsChart() {
    const ctx = document.getElementById('accountsChart').getContext('2d');
    const labels = accounts.map(acc => acc.name);
    const data = accounts.map((acc, idx) => {
      let total = 0;
      transactions.filter(t => t.accountIndex == idx).forEach(t => {
        let amount = t.type === 'Gasto'
          ? (t.installmentOffset !== undefined ? t.total : (t.months > 1 ? t.total / t.months : t.total))
          : t.total;
        total += t.type === 'Gasto' ? amount : -amount;
      });
      return total;
    });
    const backgroundColors = accounts.map(acc => {
      if (acc.color) return acc.color;
      const r = Math.floor(Math.random() * 200) + 55;
      const g = Math.floor(Math.random() * 200) + 55;
      const b = Math.floor(Math.random() * 200) + 55;
      return `rgba(${r},${g},${b},0.7)`;
    });
    if (accountsChart) accountsChart.destroy();
    accountsChart = new Chart(ctx, {
      type: 'pie',
      data: { labels: labels, datasets: [{ data: data, backgroundColor: backgroundColors }] },
      options: {
        responsive: true,
        plugins: { legend: { position: 'bottom' } },
        onClick: (evt, elements) => {
          if (elements.length > 0) {
            const index = elements[0].index;
            if (selectedAccountFilters.includes(index)) {
              selectedAccountFilters = selectedAccountFilters.filter(i => i !== index);
            } else {
              selectedAccountFilters.push(index);
            }
            renderTransactions();
          }
        }
      }
    });
  }

  function showTransactionDetails(tr) {
    let acc = accounts[tr.accountIndex];
    let html = `
      <p><strong>Fecha:</strong> ${formatFullDate(parseLocalDate(tr.creationDate))}</p>
      <p><strong>Descripción:</strong> ${tr.description}</p>
      <p><strong>Cuenta:</strong> ${acc ? acc.name : 'N/A'}</p>
    `;
    if (tr.type === 'Gasto') {
      html += `
        <p><strong>Costo:</strong>
          <span class="amount" style="font-size: 40px;">$${Number(tr.cost).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })} x ${tr.quantity}</span>
        </p>
        <p><strong>Pago mensual:</strong>
          <span class="amount" style="font-size: 40px;">$${Number(tr.total).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</span>
        </p>
      `;
      if (!tr.installmentOffset && tr.months > 1) {
        let pagoMensual = tr.total / tr.months;
        html += `
          <p><strong>Pago Mensual:</strong>
            <span class="amount">$${Number(pagoMensual).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</span>
          </p>
        `;
      }
      if (tr.installmentOffset !== undefined) {
        html += `<p><strong>Cuota:</strong> ${tr.installmentOffset + 1} de ${tr.totalMonths}</p>`;
      }
      let eff = computeEffectivePaymentDate(tr, acc);
      let periodCount = useFortnights ? countFortnights(new Date(), eff) : countFridays(new Date(), eff);
      let portion = (tr.installmentOffset !== undefined || tr.months === 1)
        ? tr.total
        : tr.total / tr.months;
      let totalPeriod = periodCount > 0 ? portion / periodCount : portion;
      html += `
        <p><strong>Total por ${useFortnights ? "quincena" : "viernes"}:</strong>
          <span class="amount" style="font-size: 40px;">$${Number(totalPeriod).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</span>
        </p>
        <p><strong>Fecha de Pago:</strong> ${formatFullDate(eff)}</p>
      `;
    } else {
      html += `
        <p><strong>Total:</strong>
          <span class="amount" style="font-size: 40px;">$${Number(tr.total).toLocaleString("es-MX", { minimumFractionDigits: 0, maximumFractionDigits: 2 })}</span>
        </p>
      `;
    }
    document.getElementById('transactionDetailsContent').innerHTML = html;
    let btns = document.getElementById('transactionActionButtons');
    btns.innerHTML = `
      <button id="transEditBtn"><span class="material-icons">edit</span></button>
      <button id="transDeleteBtn"><span class="material-icons">delete</span></button>
    `;
    document.getElementById('transactionDetailsModal').style.display = 'flex';

    document.getElementById('transEditBtn').onclick = () => {
      isEditingTransaction = true;
      document.getElementById('transactionModalTitle').innerText = 'Editar Transacción';
      document.getElementById('transCreationDate').value = tr.creationDate;
      document.getElementById('transDescription').value = tr.description;
      document.getElementById('transAccount').value = tr.accountIndex;
      document.getElementById('transType').value = tr.type;
      document.getElementById('gastoFields').style.display = 'block';
      document.getElementById('cantidadField').style.display = 'block';
      document.getElementById('transCost').value = tr.cost;
      document.getElementById('transQuantity').value = tr.quantity;
      if (tr.type === 'Gasto') {
        if (tr.installmentOffset === undefined && tr.months > 1) {
          document.getElementById('mesesField').style.display = 'block';
          document.getElementById('transMonths').value = tr.months;
        } else {
          document.getElementById('mesesField').style.display = 'none';
        }
      } else {
        document.getElementById('mesesField').style.display = 'none';
      }
      document.getElementById('transactionModal').style.display = 'flex';
      document.getElementById('transactionDetailsModal').style.display = 'none';
    };

    document.getElementById('transDeleteBtn').onclick = () => {
      if (confirm("¿Está seguro de eliminar esta transacción?")) {
        let idx = transactions.indexOf(tr);
        if (idx !== -1) {
          transactions.splice(idx, 1);
          saveTransactions();
          renderTransactions();
        }
        document.getElementById('transactionDetailsModal').style.display = 'none';
      }
    };
  }

  document.getElementById('closeTransactionModal').onclick = () => {
    document.getElementById('transactionModal').style.display = 'none';
  };
  document.getElementById('closeTransactionDetailsModal').onclick = () => {
    document.getElementById('transactionDetailsModal').style.display = 'none';
  };
  document.getElementById('closeAccountModal').onclick = () => {
    document.getElementById('accountModal').style.display = 'none';
  };
  document.getElementById('closeAccountInfoModal').onclick = () => {
    document.getElementById('accountInfoModal').style.display = 'none';
  };
  document.getElementById('closeGeneralInfoModal').onclick = () => {
    document.getElementById('generalInfoModal').style.display = 'none';
  };
  document.querySelectorAll('.modal').forEach(m => {
    m.addEventListener('click', (e) => {
      if (e.target === m) m.style.display = 'none';
    });
  });

  document.getElementById('transactionForm').addEventListener('submit', (e) => {
    e.preventDefault();
    let creationDate = document.getElementById('transCreationDate').value;
    if (!creationDate) creationDate = formatDateForInput(new Date());
    const description = document.getElementById('transDescription').value;
    const accountIndex = parseInt(document.getElementById('transAccount').value);
    const type = document.getElementById('transType').value;
    let cost = parseFloat(document.getElementById('transCost').value) || 0;
    let quantity = parseFloat(document.getElementById('transQuantity').value) || 0;
    let months = type === 'Gasto' ? parseInt(document.getElementById('transMonths').value) || 1 : 0;
    let baseTotal = cost * quantity;

    if (type === 'Ingreso') {
      const newIncome = { creationDate, description, accountIndex, type, cost, quantity, months: 0, total: baseTotal };
      if (isEditingTransaction && selectedTransactionIndex !== null) {
        transactions[selectedTransactionIndex] = newIncome;
      } else {
        transactions.push(newIncome);
      }
    } else {
      if (type === 'Gasto' && months >= 2) {
        for (let i = 0; i < months; i++) {
          let installmentTotal = baseTotal / months;
          let newRecord = { creationDate, description, accountIndex, type, cost, quantity, months: 1, total: installmentTotal, installmentOffset: i, totalMonths: months };
          transactions.push(newRecord);
        }
      } else {
        const newData = { creationDate, description, accountIndex, type, cost, quantity, months, total: baseTotal };
        if (isEditingTransaction && selectedTransactionIndex !== null) {
          transactions[selectedTransactionIndex] = newData;
        } else {
          transactions.push(newData);
        }
      }
    }
    saveTransactions();
    renderTransactions();
    updateAccountsChart();
    document.getElementById('transactionModal').style.display = 'none';
    isEditingTransaction = false;
    selectedTransactionIndex = null;
  });

  document.getElementById('accountForm').addEventListener('submit', (e) => {
    e.preventDefault();
    const name = document.getElementById('accountName').value;
    const color = document.getElementById('accountColor').value;
    const cutoffDate = document.getElementById('accountCutoffDate').value;
    const paymentDate = document.getElementById('accountPaymentDate').value;
    if (name && cutoffDate && paymentDate) {
      const newAccount = { name, color, cutoffDate, paymentDate };
      accounts.push(newAccount);
      saveAccounts();
      populateAccountSelect();
      updateAccountsChart();
      document.getElementById('accountModal').style.display = 'none';
    } else {
      alert("Completa todos los campos requeridos");
    }
  });

  document.getElementById('addAccountBtn').addEventListener('click', () => {
    document.getElementById('accountForm').reset();
    document.getElementById('accountModal').style.display = 'flex';
  });

  document.getElementById('addTransactionBtn').addEventListener('click', () => {
    isEditingTransaction = false;
    selectedTransactionIndex = null;
    document.getElementById('transactionForm').reset();
    document.getElementById('transCreationDate').value = formatDateForInput(new Date());
    document.getElementById('transType').value = 'Gasto';
    document.getElementById('transDescription').value = '';
    document.getElementById('gastoFields').style.display = 'block';
    document.getElementById('cantidadField').style.display = 'block';
    document.getElementById('mesesField').style.display = 'block';
    document.getElementById('transactionModal').style.display = 'flex';
  });

  document.getElementById('generalInfoBtn').addEventListener('click', () => { showGeneralInfo(); });
  document.getElementById('transType').addEventListener('change', (e) => {
    if (e.target.value === 'Ingreso') {
      document.getElementById('gastoFields').style.display = 'block';
      document.getElementById('cantidadField').style.display = 'block';
      document.getElementById('mesesField').style.display = 'none';
      document.getElementById('transDescription').value = 'Ingreso';
    } else {
      document.getElementById('gastoFields').style.display = 'block';
      document.getElementById('cantidadField').style.display = 'block';
      document.getElementById('mesesField').style.display = 'block';
      document.getElementById('transDescription').value = '';
    }
  });

  window.onload = function () {
    document.getElementById('currentDate').innerText = formatFullDate(new Date());
    loadAccounts();
    loadTransactions();
  };

  function checkWeeklyPaymentNotification() {
    if (useFortnights) return; // Solo para modo semanal
    const today = new Date();
    const friday = getCurrentFriday();
    const diffDays = Math.ceil((friday - today) / (1000 * 60 * 60 * 24));
    
    if (diffDays <= 5) {
      let pendingAccounts = [];
      // Se recorre cada cuenta para verificar su pago del viernes
      accounts.forEach((account, index) => {
        const paymentAmount = calculateWeeklyPayment(index);
        if (paymentAmount > 0) {
          pendingAccounts.push({ accountIndex: index, amount: paymentAmount });
        }
      });
      
      if (pendingAccounts.length > 0) {        showPaymentNotificationModal(pendingAccounts);
      }
    }
  }

  function calculateWeeklyPayment(accountIndex) {
    let total = 0;
    const account = accounts[accountIndex];
    transactions.forEach(tr => {
      if (tr.accountIndex == accountIndex && tr.type === 'Gasto') {
        const eff = computeEffectivePaymentDate(tr, account);
        if (eff.toDateString() === getCurrentFriday().toDateString()) {
          total += (tr.installmentOffset !== undefined 
                     ? tr.total 
                     : (tr.months > 1 ? tr.total / tr.months : tr.total));
        }
      }
    });
    return total;
  }

  

  window.onload = function () {
    document.getElementById('currentDate').innerText = formatFullDate(new Date());
    loadAccounts();
    loadTransactions();
    checkWeeklyPaymentNotification();
  };
</script>
</body>
</html>
